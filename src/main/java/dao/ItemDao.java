package dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import model.Auction;
import model.Bid;
import model.Customer;
import model.Employee;
import model.Item;

public class ItemDao {

	
	public List<Item> getItems() {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch details of all the items has to be implemented
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" List
		 */

		List<Item> items = new ArrayList<Item>();
				
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo", "root", "Xzy351501");
			Statement st = con.createStatement();
			String query = "select * from Item";
			ResultSet rs = st.executeQuery(query); 
			while(rs.next()) {
				Item item = new Item();
				item.setDescription(rs.getString("Description"));
				item.setItemID(rs.getInt("ItemID"));
				item.setName(rs.getString("Name"));
				item.setNumCopies(rs.getInt("NumCopies"));
				item.setType(rs.getString("Type"));
				items.add(item);
			} 
		}catch(Exception e) {
				System.out.println(e);
		}
		
		return items;

	}
	
	public List<Item> getBestsellerItems() {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch details of the bestseller items has to be implemented
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" List
		 */

		List<Item> items = new ArrayList<Item>();
		
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo", "root", "Xzy351501");
			Statement st = con.createStatement();
			String q1 = "CREATE OR REPLACE VIEW Sold (CustomerID, SellerID, AuctionID, SoldPrice)\r\n" + 
					"AS\r\n" + 
					"SELECT  distinct B1.CustomerID, P.CustomerID, P.AuctionID, B1.BidPrice AS SoldPrice\r\n" + 
					"FROM    Bid B1, Post P, Auction A\r\n" + 
					"WHERE  B1.BidTime <= P.ExpireDate  AND B1.AuctionID = P.AuctionID \r\n" + 
					"AND B1.BidPrice >= ALL ((SELECT B2.BidPrice FROM Bid B2 WHERE B1.AuctionID = B2.AuctionID))\r\n" + 
					"AND B1.BidPrice >= A.Reserve;";
			String q2 = "SELECT I.ItemID, I.Description, I.Type, I.Name, I.NumCopies, (I.ItemID) AS CountItem\r\n" + 
					"FROM Sold S, Auction A, Item I\r\n" + 
					"WHERE S.AuctionID = A.AuctionID and A.ItemID=I.ItemID\r\n" + 
					"Group BY I.ItemID\r\n" + 
					"Order BY CountItem";

			st.execute(q1);
			ResultSet rs = st.executeQuery(q2);
			while(rs.next()) {
				Item item = new Item();
				item.setItemID(rs.getInt("ItemID"));
				item.setDescription(rs.getString("Description"));
				item.setType(rs.getString("Type"));
				item.setName(rs.getString("Name"));
				item.setNumCopies(rs.getInt("NumCopies"));
				items.add(item);
			}
		} catch(Exception e) {
			System.out.println(e);
			return null;
		}
		return items;

	}

	public List<Item> getSummaryListing(String searchKeyword) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch details of summary listing of revenue generated by a particular item or item type must be implemented
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList
		 * Store the revenue generated by an item in the soldPrice attribute, using setSoldPrice method of each "item" object
		 */

		List<Item> items = new ArrayList<Item>();
		
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo", "root", "Xzy351501");
			Statement st = con.createStatement();
			String q1 = "CREATE OR REPLACE VIEW Sold (CustomerID, SellerID, AuctionID, SoldPrice)\r\n" + 
					"AS\r\n" + 
					"SELECT  distinct B1.CustomerID, P.CustomerID, P.AuctionID, B1.BidPrice AS SoldPrice\r\n" + 
					"FROM    Bid B1, Post P, Auction A\r\n" + 
					"WHERE  B1.BidTime <= P.ExpireDate  AND B1.AuctionID = P.AuctionID \r\n" + 
					"AND B1.BidPrice >= ALL ((SELECT B2.BidPrice FROM Bid B2 WHERE B1.AuctionID = B2.AuctionID))\r\n" + 
					"AND B1.BidPrice >= A.Reserve;";
			String q2 = "SELECT *\r\n" + 
					"FROM Sold S, Auction A, Item I\r\n" + 
					"WHERE\r\n" + 
					"I.Name like \"%" + searchKeyword + "%\" AND S.AuctionID = A.AuctionID AND I.ItemID = A.ItemID";
			String q3 = "SELECT *\r\n" + 
					"FROM Sold S, Auction A, Item I\r\n" + 
					"WHERE\r\n" + 
					"I.Type like \"%" + searchKeyword + "%\" AND S.AuctionID = A.AuctionID AND I.ItemID = A.ItemID";
			String q4 = "SELECT  *\r\n" + 
					"FROM     Sold S, Person P2, Item I, Auction A\r\n" + 
					"WHERE  (P2.FirstName like \"%" + searchKeyword + "%\" or P2.LastName like \"%" + searchKeyword + "%\" ) AND\r\n" + 
					"              A.AuctionID = S.AuctionID AND P2.SSN = S.CustomerID AND A.ItemID = I.ItemID";

			st.execute(q1);
			ResultSet rs = st.executeQuery(q2);
			while(rs.next()) {
				Item item = new Item();
				item.setItemID(rs.getInt("ItemID"));
				item.setDescription(rs.getString("Description"));
				item.setType(rs.getString("Type"));
				item.setName(rs.getString("Name"));
				item.setNumCopies(rs.getInt("NumCopies"));
				item.setSoldPrice(Math.round(rs.getFloat("SoldPrice")));
				items.add(item);
			}
			rs = st.executeQuery(q3);
			while(rs.next()) {
				Item item = new Item();
				item.setItemID(rs.getInt("ItemID"));
				item.setDescription(rs.getString("Description"));
				item.setType(rs.getString("Type"));
				item.setName(rs.getString("Name"));
				item.setNumCopies(rs.getInt("NumCopies"));
				item.setSoldPrice(Math.round(rs.getFloat("SoldPrice")));
				items.add(item);
			}
			rs = st.executeQuery(q4);
			while(rs.next()) {
				Item item = new Item();
				item.setItemID(rs.getInt("ItemID"));
				item.setDescription(rs.getString("Description"));
				item.setType(rs.getString("Type"));
				item.setName(rs.getString("Name"));
				item.setNumCopies(rs.getInt("NumCopies"));
				item.setSoldPrice(Math.round(rs.getFloat("SoldPrice")));
				items.add(item);
			}
		} catch(Exception e) {
			System.out.println(e);
			return null;
		}
		return items;

	}

	public List<Item> getItemSuggestions(String customerID) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch item suggestions for a customer, indicated by customerID, must be implemented
		 * customerID, which is the Customer's ID for whom the item suggestions are fetched, is given as method parameter
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList
		 */

		List<Item> items = new ArrayList<Item>();
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo", "root", "Xzy351501");
			Statement st = con.createStatement();
			String q1 = "CREATE OR REPLACE VIEW Sold (CustomerID, SellerID, AuctionID, SoldPrice)\r\n" + 
					"AS\r\n" + 
					"SELECT  distinct B1.CustomerID, P.CustomerID, P.AuctionID, B1.BidPrice AS SoldPrice\r\n" + 
					"FROM    Bid B1, Post P, Auction A\r\n" + 
					"WHERE  B1.BidTime <= P.ExpireDate  AND B1.AuctionID = P.AuctionID \r\n" + 
					"AND B1.BidPrice >= ALL ((SELECT B2.BidPrice FROM Bid B2 WHERE B1.AuctionID = B2.AuctionID))\r\n" + 
					"AND B1.BidPrice >= A.Reserve;";
			String q2 = "CREATE OR REPLACE VIEW BoughtByCus(ItemID, ItemType)\r\n" + 
					"AS\r\n" + 
					"SELECT I.ItemID, I.Type\r\n" + 
					"FROM Item I, Auction A, Sold S\r\n" + 
					"WHERE S.AuctionID = A.AuctionID AND A.ItemID = I.ItemID AND S.CustomerID = \"" + customerID + "\"";
			String q3 = "SELECT *\r\n" + 
					"FROM Item I\r\n" + 
					"WHERE I.Type in (SELECT B.ItemType FROM boughtbycus B) AND I.ItemID Not In (Select B.ItemID From boughtbycus B)";

			st.execute(q1);
			st.execute(q2);
			ResultSet rs = st.executeQuery(q3);
			while(rs.next()) {
				Item item = new Item();
				item.setItemID(rs.getInt("ItemID"));
				item.setDescription(rs.getString("Description"));
				item.setType(rs.getString("Type"));
				item.setName(rs.getString("Name"));
				item.setNumCopies(rs.getInt("NumCopies"));
				items.add(item);
			}
		} catch(Exception e) {
			System.out.println(e);
			return null;
		}
		
		return items;

	}

	public List getItemsBySeller(String sellerID) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch items sold by a given seller, indicated by sellerID, must be implemented
		 * sellerID, which is the Sellers's ID who's items are fetched, is given as method parameter
		 * The bid and auction details of each of the items should also be fetched
		 * The bid details must have the highest current bid for the item
		 * The auction details must have the details about the auction in which the item is sold
		 * Each item record is required to be encapsulated as a "Item" class object and added to the "items" List
		 * Each bid record is required to be encapsulated as a "Bid" class object and added to the "bids" List
		 * Each auction record is required to be encapsulated as a "Auction" class object and added to the "auctions" List
		 * The items, bids and auctions Lists have to be added to the "output" List and returned
		 */

		List output = new ArrayList();
		List<Item> items = new ArrayList<Item>();
		List<Bid> bids = new ArrayList<Bid>();
		List<Auction> auctions = new ArrayList<Auction>();
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo", "root", "Xzy351501");
			Statement st = con.createStatement();
			String q1 = "CREATE OR REPLACE VIEW Sold (CustomerID, SellerID, AuctionID, SoldPrice)\r\n" + 
					"AS\r\n" + 
					"SELECT  distinct B1.CustomerID, P.CustomerID, P.AuctionID, B1.BidPrice AS SoldPrice\r\n" + 
					"FROM    Bid B1, Post P, Auction A\r\n" + 
					"WHERE  B1.BidTime <= P.ExpireDate  AND B1.AuctionID = P.AuctionID \r\n" + 
					"AND B1.BidPrice >= ALL ((SELECT B2.BidPrice FROM Bid B2 WHERE B1.AuctionID = B2.AuctionID))\r\n" + 
					"AND B1.BidPrice >= A.Reserve;";
			String q2 = "SELECT DISTINCT I.ItemID, I.Description, I.Type, I.Name, I.NumCopies, S.SoldPrice, B.CustomerID, A.MinimuBid, A.BidIncrement, A.AuctionID\r\n" + 
					"FROM Sold S, Auction A, Item I, Bid B\r\n" + 
					"WHERE\r\n" + 
					"S.SellerID = \""+sellerID +"\"  AND S.AuctionID = A.AuctionID AND I.ItemID = A.ItemID AND B.CustomerID = S.CustomerID";

			st.execute(q1);
			ResultSet rs = st.executeQuery(q2);
			while(rs.next()) {
				Item item = new Item();
				item.setItemID(rs.getInt("ItemID"));
				item.setDescription(rs.getString("Description"));
				item.setType(rs.getString("Type"));
				item.setName(rs.getString("Name"));
				item.setNumCopies(rs.getInt("NumCopies"));
				item.setSoldPrice(Math.round(rs.getFloat("SoldPrice")));
				items.add(item);
				Bid bid = new Bid();
				bid.setCustomerID(rs.getString("CustomerID"));
				bid.setBidPrice(rs.getFloat("SoldPrice"));
				bids.add(bid);
				Auction auction = new Auction();
				auction.setMinimumBid(Math.round(rs.getFloat("MinimuBid")));
				auction.setBidIncrement(Math.round(rs.getFloat("BidIncrement")));
				auction.setAuctionID(rs.getInt("AuctionID"));
				auctions.add(auction);
			}
		} catch(Exception e) {
			System.out.println(e);
			return null;
		}
		
		output.add(items);
		output.add(bids);
		output.add(auctions);
		
		return output;
	}

	public List<Item> getItemTypes() {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList
		 * A query to fetch the unique item types has to be implemented
		 * Each item type is to be added to the "item" object using setType method
		 */
		
		List<Item> items = new ArrayList<Item>();
		
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo", "root", "Xzy351501");
			Statement st = con.createStatement();
			String q1 = "SELECT DISTINCT Type\r\n" + 
					"FROM Item";
			ResultSet rs = st.executeQuery(q1);
			while(rs.next()) {
				Item item = new Item();
				item.setType(rs.getString("Type"));
				items.add(item);
			}
		} catch(Exception e) {
			System.out.println(e);
			return null;
		}
		return items;
	}

	public List getItemsByName(String itemName) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * The itemName, which is the item's name on which the query has to be implemented, is given as method parameter
		 * Query to fetch items containing itemName in their name has to be implemented
		 * Each item's corresponding auction data also has to be fetched
		 * Each item record is required to be encapsulated as a "Item" class object and added to the "items" List
		 * Each auction record is required to be encapsulated as a "Auction" class object and added to the "auctions" List
		 * The items and auctions Lists are to be added to the "output" List and returned
		 */

		List output = new ArrayList();
		List<Item> items = new ArrayList<Item>();
		List<Auction> auctions = new ArrayList<Auction>();
		
		
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo", "root", "Xzy351501");
			Statement st = con.createStatement();
			String q1 = "SELECT *\r\n" + 
					"FROM Item I, Auction A\r\n" + 
					"WHERE I.ItemID = A.ItemID AND I.Name Like \"%"+ itemName + "%\"";
			ResultSet rs = st.executeQuery(q1);
			while(rs.next()) {
				Item item = new Item();
				Auction auction = new Auction();
				auction.setAuctionID(rs.getInt("AuctionID"));

				auction.setMinimumBid(Math.round(rs.getFloat("MinimuBid")));
				auction.setBidIncrement(Math.round(rs.getFloat("BidIncrement")));
				auctions.add(auction);
				item.setDescription(rs.getString("Description"));
				item.setItemID(rs.getInt("ItemID"));
				item.setType(rs.getString("Type"));
				item.setName(rs.getString("Name"));
				items.add(item);
			}
		} catch(Exception e) {
			System.out.println(e);
			return null;
		}

		output.add(items);
		output.add(auctions);
		
		return output;
	}

	public List getItemsByType(String itemType) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * The itemType, which is the item's type on which the query has to be implemented, is given as method parameter
		 * Query to fetch items containing itemType as their type has to be implemented
		 * Each item's corresponding auction data also has to be fetched
		 * Each item record is required to be encapsulated as a "Item" class object and added to the "items" List
		 * Each auction record is required to be encapsulated as a "Auction" class object and added to the "auctions" List
		 * The items and auctions Lists are to be added to the "output" List and returned
		 */

		List output = new ArrayList();
		List<Item> items = new ArrayList<Item>();
		List<Auction> auctions = new ArrayList<Auction>();
		
		
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo", "root", "Xzy351501");
			Statement st = con.createStatement();
			String q1 = "SELECT *\r\n" + 
					"FROM Item I, Auction A\r\n" + 
					"WHERE I.ItemID = A.ItemID AND I.Type Like \"%"+ itemType + "%\"";
			ResultSet rs = st.executeQuery(q1);
			while(rs.next()) {
				Item item = new Item();
				Auction auction = new Auction();
				auction.setAuctionID(rs.getInt("AuctionID"));
				auction.setMinimumBid(Math.round(rs.getFloat("MinimuBid")));
				auction.setBidIncrement(Math.round(rs.getFloat("BidIncrement")));
				auctions.add(auction);
				item.setDescription(rs.getString("Description"));
				item.setItemID(rs.getInt("ItemID"));
				item.setType(rs.getString("Type"));
				item.setName(rs.getString("Name"));
				items.add(item);
			}
		} catch(Exception e) {
			System.out.println(e);
			return null;
		}

		output.add(items);
		output.add(auctions);
		
		return output;
	}

	public List<Item> getBestsellersForCustomer(String customerID) {

		/*
		 * The students code to fetch data from the database will be written here.
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList.
		 * Query to get the Best-seller list of items for a particular customer, indicated by the customerID, has to be implemented
		 * The customerID, which is the customer's ID for whom the Best-seller items have to be fetched, is given as method parameter
		 */

		List<Item> items = new ArrayList<Item>();
		
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo", "root", "Xzy351501");
			Statement st = con.createStatement();
			String q1 = "CREATE OR REPLACE VIEW Sold (CustomerID, SellerID, AuctionID, SoldPrice)\r\n" + 
					"AS\r\n" + 
					"SELECT  distinct B1.CustomerID, P.CustomerID, P.AuctionID, B1.BidPrice AS SoldPrice\r\n" + 
					"FROM    Bid B1, Post P, Auction A\r\n" + 
					"WHERE  B1.BidTime <= P.ExpireDate  AND B1.AuctionID = P.AuctionID \r\n" + 
					"AND B1.BidPrice >= ALL ((SELECT B2.BidPrice FROM Bid B2 WHERE B1.AuctionID = B2.AuctionID))\r\n" + 
					"AND B1.BidPrice >= A.Reserve;";
			String q2 = "SELECT I.ItemID, I.Description, I.Type, I.Name, I.NumCopies, (I.ItemID) AS CountItem\r\n" + 
					"FROM Sold S, Auction A, Item I\r\n" + 
					"WHERE S.AuctionID = A.AuctionID and S.SellerID = \"" + customerID + "\" and A.ItemID=I.ItemID\r\n" + 
					"Group BY I.ItemID\r\n" + 
					"Order BY CountItem";

			st.execute(q1);
			ResultSet rs = st.executeQuery(q2);
			while(rs.next()) {
				Item item = new Item();
				item.setItemID(rs.getInt("ItemID"));
				item.setDescription(rs.getString("Description"));
				item.setType(rs.getString("Type"));
				item.setName(rs.getString("Name"));
				item.setNumCopies(rs.getInt("NumCopies"));
				items.add(item);
			}
		} catch(Exception e) {
			System.out.println(e);
			return null;
		}
		return items;

	}

}
